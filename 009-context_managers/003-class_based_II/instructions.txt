1.
Let’s build our poem context manager from earlier again! This time we will allow it to work on files. By the end of these exercises, we will have a custom context manager that has written to a file!

Create a class called PoemFiles and give it a __init__ method that defines a self, poem_file, and mode parameter.

Inside the method, print 'Starting up a poem context manager'

2.
Next, let’s built the properties of the class via __init__. Remember this is so we can pass a file name and a mode when we call the context manager with the with statement.

Inside of the __init_ method and under the print statement, assign two properties to the class:

file that is equal to the poem_file parameter
mode that is equal to the mode parameter
3.
Next, let’s work on the __enter__ method to set up what happens when we want to start working on a file.

Create an __enter__ method. Have the method print 'Opening poem file'.

4.
In the __enter__ method, we will need to open the file we want to work on and return it! This way, it will be assigned to the variable we declare when we work with the with statement.

Inside __enter__ method give the class a new property called opened_poem_file and assign it to a call of the open() function that takes two arguments:

self.file: our classes file property
self.mode: our classes mode property
Lastly, return the opened_poem_file property!

5.
Lastly, we need to create an __exit__ method.

Write a __exit__ method that defines a self parameter and a *exc parameter. Make the method print 'Closing poem file'.

6.
We need to make sure we close our file in the __exit__ method so we properly manage our resources.

In the __exit__ method, under the print statement, call the .close() built-in function on the opened_poem_file property of the class.

7.
Uncomment the with statement and run the code. Check out poem.txt to see if the poem has been added!

Note: in reality, we wouldn’t have to create a context manager that opens a file because there’s already an open() built-in function that you can run with a with statement that will open and close a file. However, open() has its limitations, and knowing this base structure will allow us to create our own custom and more advanced context managers that can do much more than open()!